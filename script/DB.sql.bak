use GarageServiceDB
go


/***************************************** CREATE TABLE **********************************************************/
if(OBJECT_ID('Account') is not null)
	drop table Account
go
CREATE TABLE Account
(
	accountID int IDENTITY(100,1) NOT NULL,
    username varchar(125) unique,
	password varchar(8),
	name nvarchar(125),
	primary key (accountID)
)

if(OBJECT_ID('Provinces') is not null)
	drop table Provinces
go
CREATE TABLE Provinces
(
    provinceID int IDENTITY(100,1) NOT NULL,
	name nvarchar(55) unique,
	primary key (provinceID)
)

if(OBJECT_ID('Districts') is not null)
	drop table Districts
go
CREATE TABLE Districts
(
    districtID int IDENTITY(100,1) NOT NULL,
	name nvarchar(55) unique,
	primary key (districtID)
)

if(OBJECT_ID('RepairBillDetail') is not null)
	drop table RepairBillDetail
go
CREATE TABLE RepairBillDetail
(
    repairbilldetailID int IDENTITY(100,1) NOT NULL,
	partID int, --FK
	repairbillID int, --FK
	--vehicleID int, --FK
	quantity int default 0,
	subtotal money default 0, --calculated
	primary key (repairbilldetailID,partID,repairbillID)
)


if(OBJECT_ID('RepairBill') is not null)
	drop table RepairBill
go
CREATE TABLE RepairBill
(
    repairbillID int IDENTITY(100,1) NOT NULL,
	customerID int, --FK
	status nvarchar(125),
	payment nvarchar(25),
	descriptions nvarchar(255),
	total money default 0, --calculated
	created_date date default getdate(),
	updated_date date default getdate(),
	primary key (repairbillID)
)


if(OBJECT_ID('PartImportBillDetail') is not null)
	drop table PartImportBillDetail
go
CREATE TABLE PartImportBillDetail
(
    importbilldetailID int IDENTITY(100,1) NOT NULL,
	partID int, --FK
	importbillID int, --FK
	quantity int default 0,
	import_price money, --manual insert
	subtotal money default 0, --calculated

	primary key (importbilldetailID,partID,importbillID)
)


if(OBJECT_ID('Part') is not null)
	drop table Part
go
CREATE TABLE Part
(
    partID int IDENTITY(100,1) NOT NULL,
	name nvarchar(255),
	stock int default 0,
	import_price money,
	price money,
	currency varchar(12),
	cal_unit nvarchar(50),
	descriptions nvarchar(255),
	part_type int, -- FK
	brand nvarchar(150),
	primary key (partID)
)


if(OBJECT_ID('PartType') is not null)
	drop table PartType
go
CREATE TABLE PartType
(
    parttypeID int IDENTITY(100,1) NOT NULL,
	name nvarchar(255) unique,
	primary key (parttypeID)
)

-- PART -> Part type
alter table Part 
add constraint FK_Part_PartType
foreign key (part_type) references PartType(parttypeID);


--if(OBJECT_ID('Vehicle') is not null)
--	drop table Vehicle
--go
--CREATE TABLE Vehicle
--(
--    vehicleID int IDENTITY(100,1) NOT NULL,
--	name nvarchar(125),
--	color nvarchar(55),
--	typeID int, --FK
--	brandID int, --FK
--	plate_number nvarchar(15) unique,
--	descriptions nvarchar(255),
--	customerID int, --FK
--	primary key (vehicleID)
--)
if(OBJECT_ID('Vehicle') is not null)
	drop table Vehicle
go
CREATE TABLE Vehicle
(
    vehicleID int IDENTITY(100,1) NOT NULL,
	name nvarchar(125),
	color nvarchar(55),
	typeID int, --FK
	brandID int, --FK
	plate_number nvarchar(15) unique,
	descriptions nvarchar(255),
	customerID int, --FK
	oilchange_date date,
	required_oilchange_date date,
	primary key (vehicleID)
)

if(OBJECT_ID('VehicleType') is not null)
	drop table VehicleType
go
CREATE TABLE VehicleType
(
    typeID int IDENTITY(100,1) NOT NULL,
	type_name nvarchar(125) unique,
	primary key (typeID)
)


if(OBJECT_ID('VehicleBrand') is not null)
	drop table VehicleBrand
go
CREATE TABLE VehicleBrand
(
    brandID int IDENTITY(100,1) NOT NULL,
	brand_name nvarchar(125) unique,
	primary key (brandID)
)

if(OBJECT_ID('Customer') is not null)
	drop table Customer
go
CREATE TABLE Customer
(
    customerID int IDENTITY(100,1) NOT NULL,
	name nvarchar(255),
	email varchar(45) unique,
	phone varchar(20) unique not null,
	province nvarchar(150),
	district nvarchar(150),
	address_detail nvarchar(250),
	created_date date default getdate(),
	updated_date date default getdate(),
	primary key (customerID)
)

-- Vehicle -> Type
alter table Vehicle
add constraint FK_Vehicle_VehicleType
foreign key (typeID) references VehicleType(typeID);

-- Vehicle -> Brand
alter table Vehicle
add constraint FK_Vehicle_VehicleBrand
foreign key (brandID) references VehicleBrand(brandID);


-- Vehicle -> Customer
alter table Vehicle
add constraint FK_Vehicle_Customer
foreign key (customerID) references Customer(customerID);




if(OBJECT_ID('PartImportBill') is not null)
	drop table PartImportBill
go
CREATE TABLE PartImportBill
(
    importbillID int IDENTITY(100,1) NOT NULL,
	supplier nvarchar(255),
	supplier_contact varchar(125),
	status nvarchar(125),
	payment nvarchar(25),
	descriptions nvarchar(255),
	total money default 0, --calculated
	created_date date default getdate(),
	updated_date date default getdate(),

	primary key (importbillID)
)



-- Part import bill detail -> Part
alter table PartImportBillDetail
add constraint FK_PartImportBillDetail_Part
foreign key (partID) references Part(partID);

-- Part import bill detail -> Part Import Bill
alter table PartImportBillDetail
add constraint FK_PartImportBillDetail_PartImportBill
foreign key (importbillID) references PartImportBill(importbillID)
on delete cascade;



-- Repair Bill -> Customer
alter table RepairBill 
add constraint FK_RepairBill_Customer
foreign key (customerID) references Customer(customerID);

-- Repair Bill Detail -> Part
alter table RepairBillDetail
add constraint FK_RepairBillDetail_Part
foreign key (partID) references Part(partID);

-- Repair Bill Detail -> Repair Bill
alter table RepairBillDetail
add constraint FK_RepairBillDetail_RepairBill
foreign key (repairbillID) references RepairBill(repairbillID);

---- Repair Bill Detail -> Vehicle Bill
--alter table RepairBillDetail
--add constraint FK_RepairBillDetail_Vehicle
--foreign key (vehicleID) references Vehicle(vehicleID);





DBCC CHECKIDENT ('Part', RESEED, 100);
GO
DBCC CHECKIDENT ('PartType', RESEED, 100);
GO
DBCC CHECKIDENT ('Customer', RESEED, 100);
GO
DBCC CHECKIDENT ('VehicleType', RESEED, 100);
GO
DBCC CHECKIDENT ('VehicleBrand', RESEED, 100);
GO
DBCC CHECKIDENT ('Vehicle', RESEED, 100);
GO
DBCC CHECKIDENT ('Provinces', RESEED, 100);
GO
DBCC CHECKIDENT ('Districts', RESEED, 100);
GO
DBCC CHECKIDENT ('PartImportBill', RESEED, 100);
GO
DBCC CHECKIDENT ('PartImportBillDetail', RESEED, 100);
GO
DBCC CHECKIDENT ('RepairBill', RESEED, 100);
GO
DBCC CHECKIDENT ('RepairBillDetail', RESEED, 100);
GO



---------------------- @@@ QUERY @@@ -------------------------------

--select p.*,pt.name as type_name from PartType pt,Part p where pt.parttypeID = p.part_type
--and concat(p.name, pt.name, p.brand) LIKE N'%%'

--SELECT p.pcode, p.barcode, p.pdesc, b.brand, c.category, p.price, p.reorder 
--FROM tbProduct AS p INNER JOIN tbBrand AS b ON b.id = p.bid INNER JOIN tbCategory AS c on c.id = p.cid 
--WHERE CONCAT(p.pdesc, b.brand, c.category) LIKE '%" +txtSearch.Text+ "%'

--select distinct v.*,vt.type_name,vb.brand_name,c.phone from Vehicle v inner join Customer c
--on v.customerID = c.customerID
--inner join VehicleType vt on v.typeID = vt.typeID
--inner join VehicleBrand vb on v.brandID = vb.brandID

--select v.*,vt.type_name,vb.brand_name,c.phone from Vehicle v, VehicleType vt, VehicleBrand vb, Customer c
--where v.typeID = vt.typeID and v.brandID = vb.brandID and v.customerID = c.customerID;

--select * from Vehicle where concat(name,color,plate_number,) LIKE N'%" + txtSearch.Text + "%'

--select distinct v.*,vt.type_name,vb.brand_name,c.phone from Vehicle v inner join Customer c
--on v.customerID = c.customerID
--inner join VehicleType vt on v.typeID = vt.typeID
--inner join VehicleBrand vb on v.brandID = vb.brandID
--where concat(v.name,v.color,v.plate_number,vt.type_name,vb.brand_name,c.phone) LIKE N'%" + txtSearch.Text + "%'

--select * from VehicleType
--select * from VehicleBrand
--select * from customer
--select TOP(1) customerID, name from customer where phone = '02054433029'

--select TOP(1) customerID, name from customer where phone = '02054433029'

--select * from PartImportBill;
--SELECT * FROM PartImportBill WHERE created_date BETWEEN '2021-08-08' and '2022-09-08'

--select * from PartImportBill
--select a.*, p.price from PartImportBillDetail a, Part p
--where a.partID = p.partID

--select pt.* from PartImportBillDetail pt inner join PartImportBill p on pt.importbillID = p.importbillID
--where p.importbillID = 100



--select top(1) sum(subtotal) as total from PartImportBillDetail
--where importbillID = 102
--group by importbillID

--select 	
--		b.importbillID,
--		b.supplier,
--		b.status,
--		b.payment,
--		b.total,
--		b.created_date,
--		p.name,
--		p.price,
--		p.cal_unit,
--		bdt.quantity,
--		bdt.subtotal
--		from PartImportBill b
--inner join PartImportBillDetail bdt
--on b.importbillID = bdt.importbillID
--inner join Part p on bdt.partID = p.partID
--where b.importbillID = 101


--select 	
--		p.partID,
--		p.name,
--		p.price,
--		p.cal_unit,
--		p.stock as qty_in_stcok,
--		bdt.quantity as qty_imported,
--		bdt.subtotal
--		from PartImportBillDetail bdt
--		inner join Part p on bdt.partID = p.partID
--		--where bdt.importbillID = 101


--select b.repairbillID,b.customerID,c.name as cust_name,c.phone,c.email,b.status,b.payment,b.total,b.descriptions,b.created_date
--from RepairBill b inner join Customer c on b.customerID = c.customerID
--where concat(b.status,b.payment,c.name,c.phone,c.email) = N''